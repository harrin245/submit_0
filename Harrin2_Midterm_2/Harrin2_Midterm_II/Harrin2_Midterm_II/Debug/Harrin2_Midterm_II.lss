
Harrin2_Midterm_II.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000408  0000049c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000408  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800108  00800108  000004a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011dd  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b73  00000000  00000000  00001791  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000baa  00000000  00000000  00002304  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00002eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007cab  00000000  00000000  00002ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000427  00000000  00000000  0000ac9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000b0c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000004cf  00000000  00000000  0000b146  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	59 c0       	rjmp	.+178    	; 0xb4 <__ctors_end>
   2:	00 00       	nop
   4:	72 c0       	rjmp	.+228    	; 0xea <__bad_interrupt>
   6:	00 00       	nop
   8:	70 c0       	rjmp	.+224    	; 0xea <__bad_interrupt>
   a:	00 00       	nop
   c:	6e c0       	rjmp	.+220    	; 0xea <__bad_interrupt>
   e:	00 00       	nop
  10:	6c c0       	rjmp	.+216    	; 0xea <__bad_interrupt>
  12:	00 00       	nop
  14:	6a c0       	rjmp	.+212    	; 0xea <__bad_interrupt>
  16:	00 00       	nop
  18:	68 c0       	rjmp	.+208    	; 0xea <__bad_interrupt>
  1a:	00 00       	nop
  1c:	66 c0       	rjmp	.+204    	; 0xea <__bad_interrupt>
  1e:	00 00       	nop
  20:	64 c0       	rjmp	.+200    	; 0xea <__bad_interrupt>
  22:	00 00       	nop
  24:	62 c0       	rjmp	.+196    	; 0xea <__bad_interrupt>
  26:	00 00       	nop
  28:	60 c0       	rjmp	.+192    	; 0xea <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5e c0       	rjmp	.+188    	; 0xea <__bad_interrupt>
  2e:	00 00       	nop
  30:	5c c0       	rjmp	.+184    	; 0xea <__bad_interrupt>
  32:	00 00       	nop
  34:	5a c0       	rjmp	.+180    	; 0xea <__bad_interrupt>
  36:	00 00       	nop
  38:	58 c0       	rjmp	.+176    	; 0xea <__bad_interrupt>
  3a:	00 00       	nop
  3c:	56 c0       	rjmp	.+172    	; 0xea <__bad_interrupt>
  3e:	00 00       	nop
  40:	54 c0       	rjmp	.+168    	; 0xea <__bad_interrupt>
  42:	00 00       	nop
  44:	52 c0       	rjmp	.+164    	; 0xea <__bad_interrupt>
  46:	00 00       	nop
  48:	50 c0       	rjmp	.+160    	; 0xea <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4e c0       	rjmp	.+156    	; 0xea <__bad_interrupt>
  4e:	00 00       	nop
  50:	4c c0       	rjmp	.+152    	; 0xea <__bad_interrupt>
  52:	00 00       	nop
  54:	4a c0       	rjmp	.+148    	; 0xea <__bad_interrupt>
  56:	00 00       	nop
  58:	48 c0       	rjmp	.+144    	; 0xea <__bad_interrupt>
  5a:	00 00       	nop
  5c:	46 c0       	rjmp	.+140    	; 0xea <__bad_interrupt>
  5e:	00 00       	nop
  60:	44 c0       	rjmp	.+136    	; 0xea <__bad_interrupt>
  62:	00 00       	nop
  64:	42 c0       	rjmp	.+132    	; 0xea <__bad_interrupt>
  66:	00 00       	nop
  68:	40 c0       	rjmp	.+128    	; 0xea <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3e c0       	rjmp	.+124    	; 0xea <__bad_interrupt>
  6e:	00 00       	nop
  70:	3c c0       	rjmp	.+120    	; 0xea <__bad_interrupt>
  72:	00 00       	nop
  74:	3a c0       	rjmp	.+116    	; 0xea <__bad_interrupt>
  76:	00 00       	nop
  78:	38 c0       	rjmp	.+112    	; 0xea <__bad_interrupt>
  7a:	00 00       	nop
  7c:	36 c0       	rjmp	.+108    	; 0xea <__bad_interrupt>
  7e:	00 00       	nop
  80:	34 c0       	rjmp	.+104    	; 0xea <__bad_interrupt>
  82:	00 00       	nop
  84:	32 c0       	rjmp	.+100    	; 0xea <__bad_interrupt>
  86:	00 00       	nop
  88:	30 c0       	rjmp	.+96     	; 0xea <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2e c0       	rjmp	.+92     	; 0xea <__bad_interrupt>
  8e:	00 00       	nop
  90:	2c c0       	rjmp	.+88     	; 0xea <__bad_interrupt>
  92:	00 00       	nop
  94:	2a c0       	rjmp	.+84     	; 0xea <__bad_interrupt>
  96:	00 00       	nop
  98:	28 c0       	rjmp	.+80     	; 0xea <__bad_interrupt>
  9a:	00 00       	nop
  9c:	26 c0       	rjmp	.+76     	; 0xea <__bad_interrupt>
  9e:	00 00       	nop
  a0:	24 c0       	rjmp	.+72     	; 0xea <__bad_interrupt>
  a2:	00 00       	nop
  a4:	22 c0       	rjmp	.+68     	; 0xea <__bad_interrupt>
  a6:	00 00       	nop
  a8:	20 c0       	rjmp	.+64     	; 0xea <__bad_interrupt>
  aa:	00 00       	nop
  ac:	1e c0       	rjmp	.+60     	; 0xea <__bad_interrupt>
  ae:	00 00       	nop
  b0:	1c c0       	rjmp	.+56     	; 0xea <__bad_interrupt>
	...

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e8 e0       	ldi	r30, 0x08	; 8
  c8:	f4 e0       	ldi	r31, 0x04	; 4
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a8 30       	cpi	r26, 0x08	; 8
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a8 e0       	ldi	r26, 0x08	; 8
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a6 31       	cpi	r26, 0x16	; 22
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	f1 d0       	rcall	.+482    	; 0x2ca <main>
  e8:	8d c1       	rjmp	.+794    	; 0x404 <_exit>

000000ea <__bad_interrupt>:
  ea:	8a cf       	rjmp	.-236    	; 0x0 <__vectors>

000000ec <I2C_Init>:
			I2C_Stop();										/* If not then generate stop condition */
			continue;										/* continue with start loop again */
		}
		break;												/* If yes then break loop */
	}
}
  ec:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  f0:	88 e4       	ldi	r24, 0x48	; 72
  f2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
  f6:	08 95       	ret

000000f8 <I2C_Start>:
  f8:	94 ea       	ldi	r25, 0xA4	; 164
  fa:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  fe:	ec eb       	ldi	r30, 0xBC	; 188
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	90 81       	ld	r25, Z
 104:	99 23       	and	r25, r25
 106:	ec f7       	brge	.-6      	; 0x102 <I2C_Start+0xa>
 108:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 10c:	98 7f       	andi	r25, 0xF8	; 248
 10e:	98 30       	cpi	r25, 0x08	; 8
 110:	99 f4       	brne	.+38     	; 0x138 <I2C_Start+0x40>
 112:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 116:	84 e8       	ldi	r24, 0x84	; 132
 118:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 11c:	ec eb       	ldi	r30, 0xBC	; 188
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	88 23       	and	r24, r24
 124:	ec f7       	brge	.-6      	; 0x120 <I2C_Start+0x28>
 126:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 12a:	88 7f       	andi	r24, 0xF8	; 248
 12c:	88 31       	cpi	r24, 0x18	; 24
 12e:	31 f0       	breq	.+12     	; 0x13c <I2C_Start+0x44>
 130:	80 32       	cpi	r24, 0x20	; 32
 132:	31 f0       	breq	.+12     	; 0x140 <I2C_Start+0x48>
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	08 95       	ret
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	08 95       	ret
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	08 95       	ret
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	08 95       	ret

00000144 <I2C_Stop>:
 144:	84 e9       	ldi	r24, 0x94	; 148
 146:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 14a:	ec eb       	ldi	r30, 0xBC	; 188
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	84 fd       	sbrc	r24, 4
 152:	fd cf       	rjmp	.-6      	; 0x14e <I2C_Stop+0xa>
 154:	08 95       	ret

00000156 <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR0 = data;											/* Copy data in TWI data register */
 156:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR0 = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
 15a:	84 e8       	ldi	r24, 0x84	; 132
 15c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR0 & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
 160:	ec eb       	ldi	r30, 0xBC	; 188
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	88 23       	and	r24, r24
 168:	ec f7       	brge	.-6      	; 0x164 <I2C_Write+0xe>
	status = TWSR0 & 0xF8;									/* Read TWI status register with masking lower three bits */
 16a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 16e:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
 170:	88 32       	cpi	r24, 0x28	; 40
 172:	21 f0       	breq	.+8      	; 0x17c <I2C_Write+0x26>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
 174:	80 33       	cpi	r24, 0x30	; 48
 176:	21 f0       	breq	.+8      	; 0x180 <I2C_Write+0x2a>
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	08 95       	ret
	TWDR0 = data;											/* Copy data in TWI data register */
	TWCR0 = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR0 & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR0 & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
 180:	81 e0       	ldi	r24, 0x01	; 1
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
}
 182:	08 95       	ret

00000184 <I2C_Read_Ack>:

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR0=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
 184:	84 ec       	ldi	r24, 0xC4	; 196
 186:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR0 & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
 18a:	ec eb       	ldi	r30, 0xBC	; 188
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	88 23       	and	r24, r24
 192:	ec f7       	brge	.-6      	; 0x18e <I2C_Read_Ack+0xa>
	return TWDR0;											/* Return received data */
 194:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}	
 198:	08 95       	ret

0000019a <init_uart>:
#define APDS9960_WRITE 0x72
#define APDS9960_READ 0x73

void init_uart(uint16_t baudrate){

	uint16_t UBRR_val = (F_CPU/16)/(baudrate-1);
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	9c 01       	movw	r18, r24
 19e:	40 e0       	ldi	r20, 0x00	; 0
 1a0:	50 e0       	ldi	r21, 0x00	; 0
 1a2:	60 e4       	ldi	r22, 0x40	; 64
 1a4:	72 e4       	ldi	r23, 0x42	; 66
 1a6:	8f e0       	ldi	r24, 0x0F	; 15
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	d7 d0       	rcall	.+430    	; 0x35a <__udivmodsi4>

	UBRR0H = UBRR_val >> 8;
 1ac:	83 2f       	mov	r24, r19
 1ae:	99 27       	eor	r25, r25
 1b0:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = UBRR_val;
 1b4:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>

	UCSR0B |= (1<<TXEN0) | (1<<RXEN0) | (1<<RXCIE0); // UART TX (Transmit - senden) einschalten
 1b8:	e1 ec       	ldi	r30, 0xC1	; 193
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	88 69       	ori	r24, 0x98	; 152
 1c0:	80 83       	st	Z, r24
	UCSR0C |= (1<<USBS0) | (3<<UCSZ00); //Modus Asynchronous 8N1 (8 Datenbits, No Parity, 1 Stopbit)
 1c2:	e2 ec       	ldi	r30, 0xC2	; 194
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	8e 60       	ori	r24, 0x0E	; 14
 1ca:	80 83       	st	Z, r24
 1cc:	08 95       	ret

000001ce <uart_putc>:
}

void uart_putc(unsigned char c){

	while(!(UCSR0A & (1<<UDRE0))); // wait until sending is possible
 1ce:	e0 ec       	ldi	r30, 0xC0	; 192
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	90 81       	ld	r25, Z
 1d4:	95 ff       	sbrs	r25, 5
 1d6:	fd cf       	rjmp	.-6      	; 0x1d2 <uart_putc+0x4>
	UDR0 = c; // output character saved in c
 1d8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 1dc:	08 95       	ret

000001de <uart_puts>:
}

void uart_puts(char *s){
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	ec 01       	movw	r28, r24
	while(*s){
 1e4:	88 81       	ld	r24, Y
 1e6:	88 23       	and	r24, r24
 1e8:	29 f0       	breq	.+10     	; 0x1f4 <uart_puts+0x16>
 1ea:	21 96       	adiw	r28, 0x01	; 1
		uart_putc(*s);
 1ec:	f0 df       	rcall	.-32     	; 0x1ce <uart_putc>
	while(!(UCSR0A & (1<<UDRE0))); // wait until sending is possible
	UDR0 = c; // output character saved in c
}

void uart_puts(char *s){
	while(*s){
 1ee:	89 91       	ld	r24, Y+
 1f0:	81 11       	cpse	r24, r1
 1f2:	fc cf       	rjmp	.-8      	; 0x1ec <uart_puts+0xe>
		uart_putc(*s);
		s++;
	}
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <init_APDS9960>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fa:	2f ef       	ldi	r18, 0xFF	; 255
 1fc:	82 e5       	ldi	r24, 0x52	; 82
 1fe:	97 e0       	ldi	r25, 0x07	; 7
 200:	21 50       	subi	r18, 0x01	; 1
 202:	80 40       	sbci	r24, 0x00	; 0
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <init_APDS9960+0x6>
 208:	00 c0       	rjmp	.+0      	; 0x20a <init_APDS9960+0x10>
 20a:	00 00       	nop
int16_t raw_B = 0;
int16_t raw_C = 0;;

void init_APDS9960(void){
	_delay_ms(150);										/* Power up time >100ms */
	I2C_Start(APDS9960_WRITE);
 20c:	82 e7       	ldi	r24, 0x72	; 114
 20e:	74 df       	rcall	.-280    	; 0xf8 <I2C_Start>
	I2C_Write(0x80); // set pointer to ENABLE REGISTER
 210:	80 e8       	ldi	r24, 0x80	; 128
 212:	a1 df       	rcall	.-190    	; 0x156 <I2C_Write>
	I2C_Write(0x03); // write 0x06 to ENABLE REGISTER
 214:	83 e0       	ldi	r24, 0x03	; 3
 216:	9f df       	rcall	.-194    	; 0x156 <I2C_Write>
	I2C_Stop();
 218:	95 df       	rcall	.-214    	; 0x144 <I2C_Stop>

	I2C_Start(APDS9960_WRITE);
 21a:	82 e7       	ldi	r24, 0x72	; 114
 21c:	6d df       	rcall	.-294    	; 0xf8 <I2C_Start>
	I2C_Write(0x81); // set pointer to ALS ADC Integration Time
 21e:	81 e8       	ldi	r24, 0x81	; 129
 220:	9a df       	rcall	.-204    	; 0x156 <I2C_Write>
	I2C_Write(0xDB); // 219 =0XDB = 37 = 103 ms = 37889
 222:	8b ed       	ldi	r24, 0xDB	; 219
 224:	98 df       	rcall	.-208    	; 0x156 <I2C_Write>
	I2C_Stop();
 226:	8e df       	rcall	.-228    	; 0x144 <I2C_Stop>

	I2C_Start(APDS9960_WRITE);
 228:	82 e7       	ldi	r24, 0x72	; 114
 22a:	66 df       	rcall	.-308    	; 0xf8 <I2C_Start>
 22c:	8f e8       	ldi	r24, 0x8F	; 143
	I2C_Write(0x8F); // set pointer to CONTROL<AGAIN>
 22e:	93 df       	rcall	.-218    	; 0x156 <I2C_Write>
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	91 df       	rcall	.-222    	; 0x156 <I2C_Write>
	I2C_Write(0x01); // ALS and Color Gain Control = 0 = x1
 234:	87 cf       	rjmp	.-242    	; 0x144 <I2C_Stop>
 236:	08 95       	ret

00000238 <getreading>:
 238:	82 e7       	ldi	r24, 0x72	; 114
	I2C_Stop();
 23a:	5e df       	rcall	.-324    	; 0xf8 <I2C_Start>
 23c:	84 e9       	ldi	r24, 0x94	; 148
 23e:	8b df       	rcall	.-234    	; 0x156 <I2C_Write>

	I2C_Start(APDS9960_WRITE);
	I2C_Write(0x94); // set pointer to CDATA
	I2C_Stop();

	I2C_Start(APDS9960_READ);
 240:	81 df       	rcall	.-254    	; 0x144 <I2C_Stop>
 242:	83 e7       	ldi	r24, 0x73	; 115
 244:	59 df       	rcall	.-334    	; 0xf8 <I2C_Start>

	raw_C =  ((uint8_t)I2C_Read_Ack());
 246:	9e df       	rcall	.-196    	; 0x184 <I2C_Read_Ack>
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 24e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
	raw_C |= ((uint8_t)I2C_Read_Ack())<<8;
 252:	98 df       	rcall	.-208    	; 0x184 <I2C_Read_Ack>
 254:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
 258:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
 25c:	38 2b       	or	r19, r24
 25e:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <__data_end+0x1>
 262:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__data_end>

	raw_R = ((uint8_t)I2C_Read_Ack());
 266:	8e df       	rcall	.-228    	; 0x184 <I2C_Read_Ack>
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <raw_R+0x1>
 26e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <raw_R>
	raw_R |= ((uint8_t)I2C_Read_Ack())<<8;
 272:	88 df       	rcall	.-240    	; 0x184 <I2C_Read_Ack>
 274:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <raw_R>
 278:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <raw_R+0x1>
 27c:	38 2b       	or	r19, r24
 27e:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <raw_R+0x1>
 282:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <raw_R>

	raw_G = ((uint8_t)I2C_Read_Ack());
 286:	7e df       	rcall	.-260    	; 0x184 <I2C_Read_Ack>
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <raw_G+0x1>
 28e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <raw_G>
	raw_G |= ((uint8_t)I2C_Read_Ack())<<8;
 292:	78 df       	rcall	.-272    	; 0x184 <I2C_Read_Ack>
 294:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <raw_G>
 298:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <raw_G+0x1>
 29c:	38 2b       	or	r19, r24
 29e:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <raw_G+0x1>
 2a2:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <raw_G>

	raw_B = ((uint8_t)I2C_Read_Ack());
 2a6:	6e df       	rcall	.-292    	; 0x184 <I2C_Read_Ack>
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <raw_B+0x1>
 2ae:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <raw_B>
	raw_B |= ((uint8_t)I2C_Read_Ack())<<8;
 2b2:	68 df       	rcall	.-304    	; 0x184 <I2C_Read_Ack>
 2b4:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <raw_B>
 2b8:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <raw_B+0x1>
 2bc:	38 2b       	or	r19, r24
 2be:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <raw_B+0x1>
 2c2:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <raw_B>

	I2C_Stop();
 2c6:	3e cf       	rjmp	.-388    	; 0x144 <I2C_Stop>
 2c8:	08 95       	ret

000002ca <main>:
 2ca:	80 e8       	ldi	r24, 0x80	; 128

}

int main(void){
	
	init_uart(9600);
 2cc:	95 e2       	ldi	r25, 0x25	; 37
 2ce:	65 df       	rcall	.-310    	; 0x19a <init_uart>
	I2C_Init();
 2d0:	0d df       	rcall	.-486    	; 0xec <I2C_Init>
	init_APDS9960();
 2d2:	93 df       	rcall	.-218    	; 0x1fa <init_APDS9960>
 2d4:	b1 df       	rcall	.-158    	; 0x238 <getreading>
	
	while(1){
		getreading();
 2d6:	4a e0       	ldi	r20, 0x0A	; 10
 2d8:	60 e1       	ldi	r22, 0x10	; 16
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2da:	71 e0       	ldi	r23, 0x01	; 1
 2dc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 2e0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 2e4:	5c d0       	rcall	.+184    	; 0x39e <__itoa_ncheck>
 2e6:	80 e1       	ldi	r24, 0x10	; 16
		
		itoa(raw_C, buffer, 10);
		uart_puts(buffer);
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	79 df       	rcall	.-270    	; 0x1de <uart_puts>
 2ec:	80 e0       	ldi	r24, 0x00	; 0
		uart_puts("  ");
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	76 df       	rcall	.-276    	; 0x1de <uart_puts>
 2f2:	4a e0       	ldi	r20, 0x0A	; 10
 2f4:	60 e1       	ldi	r22, 0x10	; 16
 2f6:	71 e0       	ldi	r23, 0x01	; 1
 2f8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <raw_R>
 2fc:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <raw_R+0x1>
 300:	4e d0       	rcall	.+156    	; 0x39e <__itoa_ncheck>
		
		itoa(raw_R, buffer, 10);
		uart_puts(buffer);
 302:	80 e1       	ldi	r24, 0x10	; 16
 304:	91 e0       	ldi	r25, 0x01	; 1
 306:	6b df       	rcall	.-298    	; 0x1de <uart_puts>
 308:	80 e0       	ldi	r24, 0x00	; 0
		uart_puts("  ");
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	68 df       	rcall	.-304    	; 0x1de <uart_puts>
 30e:	4a e0       	ldi	r20, 0x0A	; 10
 310:	60 e1       	ldi	r22, 0x10	; 16
 312:	71 e0       	ldi	r23, 0x01	; 1
 314:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <raw_G>
 318:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <raw_G+0x1>
 31c:	40 d0       	rcall	.+128    	; 0x39e <__itoa_ncheck>
		
		itoa(raw_G, buffer, 10);
		uart_puts(buffer);
 31e:	80 e1       	ldi	r24, 0x10	; 16
 320:	91 e0       	ldi	r25, 0x01	; 1
 322:	5d df       	rcall	.-326    	; 0x1de <uart_puts>
		uart_puts("  ");
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	5a df       	rcall	.-332    	; 0x1de <uart_puts>
 32a:	4a e0       	ldi	r20, 0x0A	; 10
 32c:	60 e1       	ldi	r22, 0x10	; 16
 32e:	71 e0       	ldi	r23, 0x01	; 1
 330:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <raw_B>
 334:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <raw_B+0x1>
 338:	32 d0       	rcall	.+100    	; 0x39e <__itoa_ncheck>
		
		itoa(raw_B, buffer, 10);
		uart_puts(buffer);
 33a:	80 e1       	ldi	r24, 0x10	; 16
 33c:	91 e0       	ldi	r25, 0x01	; 1
 33e:	4f df       	rcall	.-354    	; 0x1de <uart_puts>
 340:	83 e0       	ldi	r24, 0x03	; 3
		uart_puts("  \r\n");
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	4c df       	rcall	.-360    	; 0x1de <uart_puts>
 346:	2f ef       	ldi	r18, 0xFF	; 255
 348:	83 ed       	ldi	r24, 0xD3	; 211
 34a:	90 e3       	ldi	r25, 0x30	; 48
 34c:	21 50       	subi	r18, 0x01	; 1
 34e:	80 40       	sbci	r24, 0x00	; 0
 350:	90 40       	sbci	r25, 0x00	; 0
 352:	e1 f7       	brne	.-8      	; 0x34c <main+0x82>
 354:	00 c0       	rjmp	.+0      	; 0x356 <main+0x8c>
 356:	00 00       	nop
 358:	bd cf       	rjmp	.-134    	; 0x2d4 <main+0xa>

0000035a <__udivmodsi4>:
 35a:	a1 e2       	ldi	r26, 0x21	; 33
 35c:	1a 2e       	mov	r1, r26
 35e:	aa 1b       	sub	r26, r26
 360:	bb 1b       	sub	r27, r27
 362:	fd 01       	movw	r30, r26
 364:	0d c0       	rjmp	.+26     	; 0x380 <__udivmodsi4_ep>

00000366 <__udivmodsi4_loop>:
 366:	aa 1f       	adc	r26, r26
 368:	bb 1f       	adc	r27, r27
 36a:	ee 1f       	adc	r30, r30
 36c:	ff 1f       	adc	r31, r31
 36e:	a2 17       	cp	r26, r18
 370:	b3 07       	cpc	r27, r19
 372:	e4 07       	cpc	r30, r20
 374:	f5 07       	cpc	r31, r21
 376:	20 f0       	brcs	.+8      	; 0x380 <__udivmodsi4_ep>
 378:	a2 1b       	sub	r26, r18
 37a:	b3 0b       	sbc	r27, r19
 37c:	e4 0b       	sbc	r30, r20
 37e:	f5 0b       	sbc	r31, r21

00000380 <__udivmodsi4_ep>:
 380:	66 1f       	adc	r22, r22
 382:	77 1f       	adc	r23, r23
 384:	88 1f       	adc	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	1a 94       	dec	r1
 38a:	69 f7       	brne	.-38     	; 0x366 <__udivmodsi4_loop>
 38c:	60 95       	com	r22
 38e:	70 95       	com	r23
 390:	80 95       	com	r24
 392:	90 95       	com	r25
 394:	9b 01       	movw	r18, r22
 396:	ac 01       	movw	r20, r24
 398:	bd 01       	movw	r22, r26
 39a:	cf 01       	movw	r24, r30
 39c:	08 95       	ret

0000039e <__itoa_ncheck>:
 39e:	bb 27       	eor	r27, r27
 3a0:	4a 30       	cpi	r20, 0x0A	; 10
 3a2:	31 f4       	brne	.+12     	; 0x3b0 <__itoa_ncheck+0x12>
 3a4:	99 23       	and	r25, r25
 3a6:	22 f4       	brpl	.+8      	; 0x3b0 <__itoa_ncheck+0x12>
 3a8:	bd e2       	ldi	r27, 0x2D	; 45
 3aa:	90 95       	com	r25
 3ac:	81 95       	neg	r24
 3ae:	9f 4f       	sbci	r25, 0xFF	; 255
 3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <__utoa_common>

000003b2 <__utoa_ncheck>:
 3b2:	bb 27       	eor	r27, r27

000003b4 <__utoa_common>:
 3b4:	fb 01       	movw	r30, r22
 3b6:	55 27       	eor	r21, r21
 3b8:	aa 27       	eor	r26, r26
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	aa 1f       	adc	r26, r26
 3c0:	a4 17       	cp	r26, r20
 3c2:	10 f0       	brcs	.+4      	; 0x3c8 <__utoa_common+0x14>
 3c4:	a4 1b       	sub	r26, r20
 3c6:	83 95       	inc	r24
 3c8:	50 51       	subi	r21, 0x10	; 16
 3ca:	b9 f7       	brne	.-18     	; 0x3ba <__utoa_common+0x6>
 3cc:	a0 5d       	subi	r26, 0xD0	; 208
 3ce:	aa 33       	cpi	r26, 0x3A	; 58
 3d0:	08 f0       	brcs	.+2      	; 0x3d4 <__utoa_common+0x20>
 3d2:	a9 5d       	subi	r26, 0xD9	; 217
 3d4:	a1 93       	st	Z+, r26
 3d6:	00 97       	sbiw	r24, 0x00	; 0
 3d8:	79 f7       	brne	.-34     	; 0x3b8 <__utoa_common+0x4>
 3da:	b1 11       	cpse	r27, r1
 3dc:	b1 93       	st	Z+, r27
 3de:	11 92       	st	Z+, r1
 3e0:	cb 01       	movw	r24, r22
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <strrev>

000003e4 <strrev>:
 3e4:	dc 01       	movw	r26, r24
 3e6:	fc 01       	movw	r30, r24
 3e8:	67 2f       	mov	r22, r23
 3ea:	71 91       	ld	r23, Z+
 3ec:	77 23       	and	r23, r23
 3ee:	e1 f7       	brne	.-8      	; 0x3e8 <strrev+0x4>
 3f0:	32 97       	sbiw	r30, 0x02	; 2
 3f2:	04 c0       	rjmp	.+8      	; 0x3fc <strrev+0x18>
 3f4:	7c 91       	ld	r23, X
 3f6:	6d 93       	st	X+, r22
 3f8:	70 83       	st	Z, r23
 3fa:	62 91       	ld	r22, -Z
 3fc:	ae 17       	cp	r26, r30
 3fe:	bf 07       	cpc	r27, r31
 400:	c8 f3       	brcs	.-14     	; 0x3f4 <strrev+0x10>
 402:	08 95       	ret

00000404 <_exit>:
 404:	f8 94       	cli

00000406 <__stop_program>:
 406:	ff cf       	rjmp	.-2      	; 0x406 <__stop_program>
